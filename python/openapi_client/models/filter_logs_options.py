# coding: utf-8

"""
    ALICE Bookkeeping

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class FilterLogsOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'origin': 'LogOrigin',
        'parent_log': 'int',
        'root_log': 'int'
    }

    attribute_map = {
        'origin': 'origin',
        'parent_log': 'parentLog',
        'root_log': 'rootLog'
    }

    def __init__(self, origin=None, parent_log=None, root_log=None, local_vars_configuration=None):  # noqa: E501
        """FilterLogsOptions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._origin = None
        self._parent_log = None
        self._root_log = None
        self.discriminator = None

        if origin is not None:
            self.origin = origin
        if parent_log is not None:
            self.parent_log = parent_log
        if root_log is not None:
            self.root_log = root_log

    @property
    def origin(self):
        """Gets the origin of this FilterLogsOptions.  # noqa: E501


        :return: The origin of this FilterLogsOptions.  # noqa: E501
        :rtype: LogOrigin
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this FilterLogsOptions.


        :param origin: The origin of this FilterLogsOptions.  # noqa: E501
        :type: LogOrigin
        """

        self._origin = origin

    @property
    def parent_log(self):
        """Gets the parent_log of this FilterLogsOptions.  # noqa: E501

        The unique identifier of this entity.  # noqa: E501

        :return: The parent_log of this FilterLogsOptions.  # noqa: E501
        :rtype: int
        """
        return self._parent_log

    @parent_log.setter
    def parent_log(self, parent_log):
        """Sets the parent_log of this FilterLogsOptions.

        The unique identifier of this entity.  # noqa: E501

        :param parent_log: The parent_log of this FilterLogsOptions.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                parent_log is not None and parent_log < 1):  # noqa: E501
            raise ValueError("Invalid value for `parent_log`, must be a value greater than or equal to `1`")  # noqa: E501

        self._parent_log = parent_log

    @property
    def root_log(self):
        """Gets the root_log of this FilterLogsOptions.  # noqa: E501

        The unique identifier of this entity.  # noqa: E501

        :return: The root_log of this FilterLogsOptions.  # noqa: E501
        :rtype: int
        """
        return self._root_log

    @root_log.setter
    def root_log(self, root_log):
        """Sets the root_log of this FilterLogsOptions.

        The unique identifier of this entity.  # noqa: E501

        :param root_log: The root_log of this FilterLogsOptions.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                root_log is not None and root_log < 1):  # noqa: E501
            raise ValueError("Invalid value for `root_log`, must be a value greater than or equal to `1`")  # noqa: E501

        self._root_log = root_log

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilterLogsOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FilterLogsOptions):
            return True

        return self.to_dict() != other.to_dict()
