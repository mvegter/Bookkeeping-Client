/**
 * ALICE Bookkeeping
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorSource::OAIErrorSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorSource::OAIErrorSource() {
    this->initializeModel();
}

OAIErrorSource::~OAIErrorSource() {}

void OAIErrorSource::initializeModel() {

    m_pointer_isSet = false;
    m_pointer_isValid = false;
}

void OAIErrorSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorSource::fromJsonObject(QJsonObject json) {

    m_pointer_isValid = ::OpenAPI::fromJsonValue(pointer, json[QString("pointer")]);
    m_pointer_isSet = !json[QString("pointer")].isNull() && m_pointer_isValid;
}

QString OAIErrorSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorSource::asJsonObject() const {
    QJsonObject obj;
    if (m_pointer_isSet) {
        obj.insert(QString("pointer"), ::OpenAPI::toJsonValue(pointer));
    }
    return obj;
}

QString OAIErrorSource::getPointer() const {
    return pointer;
}
void OAIErrorSource::setPointer(const QString &pointer) {
    this->pointer = pointer;
    this->m_pointer_isSet = true;
}

bool OAIErrorSource::is_pointer_Set() const{
    return m_pointer_isSet;
}

bool OAIErrorSource::is_pointer_Valid() const{
    return m_pointer_isValid;
}

bool OAIErrorSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pointer_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
