/**
 * ALICE Bookkeeping
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILog.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILog::OAILog(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILog::OAILog() {
    this->initializeModel();
}

OAILog::~OAILog() {}

void OAILog::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_root_log_id_isSet = false;
    m_root_log_id_isValid = false;

    m_parent_log_id_isSet = false;
    m_parent_log_id_isValid = false;
}

void OAILog::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILog::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_root_log_id_isValid = ::OpenAPI::fromJsonValue(root_log_id, json[QString("rootLogId")]);
    m_root_log_id_isSet = !json[QString("rootLogId")].isNull() && m_root_log_id_isValid;

    m_parent_log_id_isValid = ::OpenAPI::fromJsonValue(parent_log_id, json[QString("parentLogId")]);
    m_parent_log_id_isSet = !json[QString("parentLogId")].isNull() && m_parent_log_id_isValid;
}

QString OAILog::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILog::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(title));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(text));
    }
    if (origin.isSet()) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(origin));
    }
    if (tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(tags));
    }
    if (m_root_log_id_isSet) {
        obj.insert(QString("rootLogId"), ::OpenAPI::toJsonValue(root_log_id));
    }
    if (m_parent_log_id_isSet) {
        obj.insert(QString("parentLogId"), ::OpenAPI::toJsonValue(parent_log_id));
    }
    return obj;
}

qint64 OAILog::getId() const {
    return id;
}
void OAILog::setId(const qint64 &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAILog::is_id_Set() const{
    return m_id_isSet;
}

bool OAILog::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILog::getTitle() const {
    return title;
}
void OAILog::setTitle(const QString &title) {
    this->title = title;
    this->m_title_isSet = true;
}

bool OAILog::is_title_Set() const{
    return m_title_isSet;
}

bool OAILog::is_title_Valid() const{
    return m_title_isValid;
}

QString OAILog::getText() const {
    return text;
}
void OAILog::setText(const QString &text) {
    this->text = text;
    this->m_text_isSet = true;
}

bool OAILog::is_text_Set() const{
    return m_text_isSet;
}

bool OAILog::is_text_Valid() const{
    return m_text_isValid;
}

OAILogOrigin OAILog::getOrigin() const {
    return origin;
}
void OAILog::setOrigin(const OAILogOrigin &origin) {
    this->origin = origin;
    this->m_origin_isSet = true;
}

bool OAILog::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAILog::is_origin_Valid() const{
    return m_origin_isValid;
}

QList<OAITag> OAILog::getTags() const {
    return tags;
}
void OAILog::setTags(const QList<OAITag> &tags) {
    this->tags = tags;
    this->m_tags_isSet = true;
}

bool OAILog::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAILog::is_tags_Valid() const{
    return m_tags_isValid;
}

qint64 OAILog::getRootLogId() const {
    return root_log_id;
}
void OAILog::setRootLogId(const qint64 &root_log_id) {
    this->root_log_id = root_log_id;
    this->m_root_log_id_isSet = true;
}

bool OAILog::is_root_log_id_Set() const{
    return m_root_log_id_isSet;
}

bool OAILog::is_root_log_id_Valid() const{
    return m_root_log_id_isValid;
}

qint64 OAILog::getParentLogId() const {
    return parent_log_id;
}
void OAILog::setParentLogId(const qint64 &parent_log_id) {
    this->parent_log_id = parent_log_id;
    this->m_parent_log_id_isSet = true;
}

bool OAILog::is_parent_log_id_Set() const{
    return m_parent_log_id_isSet;
}

bool OAILog::is_parent_log_id_Valid() const{
    return m_parent_log_id_isValid;
}

bool OAILog::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (origin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_log_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_log_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILog::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_title_isValid && m_text_isValid && m_origin_isValid && m_tags_isValid && m_root_log_id_isValid && m_parent_log_id_isValid && true;
}

} // namespace OpenAPI
