/**
 * ALICE Bookkeeping
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogApi.h"
#include "OAIHelpers.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAILogApi::OAILogApi(const QString &scheme, const QString &host, int port, const QString &basePath, const int timeOut)
    : _scheme(scheme),
      _host(host),
      _port(port),
      _basePath(basePath),
      _timeOut(timeOut),
      isResponseCompressionEnabled(false),
      isRequestCompressionEnabled(false) {}

OAILogApi::~OAILogApi() {
}

void OAILogApi::setScheme(const QString &scheme) {
    _scheme = scheme;
}

void OAILogApi::setHost(const QString &host) {
    _host = host;
}

void OAILogApi::setPort(int port) {
    _port = port;
}

void OAILogApi::setBasePath(const QString &basePath) {
    _basePath = basePath;
}

void OAILogApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAILogApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAILogApi::addHeaders(const QString &key, const QString &value) {
    defaultHeaders.insert(key, value);
}

void OAILogApi::enableRequestCompression() {
    isRequestCompressionEnabled = true;
}

void OAILogApi::enableResponseCompression() {
    isResponseCompressionEnabled = true;
}

void OAILogApi::abortRequests(){
    emit abortRequestsSignal();
}

void OAILogApi::createLog(const OAICreateLog &oai_create_log) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/logs");

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    QString output = oai_create_log.asJson();
    input.request_body.append(output);

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILogApi::createLogCallback);
    connect(this, &OAILogApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAILogApi::createLogCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAILogResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit createLogSignal(output);
        emit createLogSignalFull(worker, output);
    } else {
        emit createLogSignalE(output, error_type, error_str);
        emit createLogSignalEFull(worker, error_type, error_str);
    }
}

void OAILogApi::getLogById(const qint64 &log_id) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/logs/{logId}");
    QString log_idPathParam("{");
    log_idPathParam.append("logId").append("}");
    fullPath.replace(log_idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(log_id)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILogApi::getLogByIdCallback);
    connect(this, &OAILogApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAILogApi::getLogByIdCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAILogResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit getLogByIdSignal(output);
        emit getLogByIdSignalFull(worker, output);
    } else {
        emit getLogByIdSignalE(output, error_type, error_str);
        emit getLogByIdSignalEFull(worker, error_type, error_str);
    }
}

void OAILogApi::listLogs(const QString &filter_origin, const qint32 &page_offset, const qint32 &page_limit, const QList<QString> &sort) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/logs");

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("filter[origin]")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(filter_origin)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page[offset]")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_offset)));

    if (fullPath.indexOf("?") > 0)
        fullPath.append("&");
    else
        fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("page[limit]")).append("=").append(QUrl::toPercentEncoding(::OpenAPI::toStringValue(page_limit)));

    if (sort.size() > 0) {
        if (QString("csv").indexOf("multi") == 0) {
            foreach (QString t, sort) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?");
                fullPath.append("sort=").append(::OpenAPI::toStringValue(t));
            }
        } else if (QString("csv").indexOf("ssv") == 0) {
            if (fullPath.indexOf("?") > 0)
                fullPath.append("&");
            else
                fullPath.append("?");
            fullPath.append("sort=");
            qint32 count = 0;
            foreach (QString t, sort) {
                if (count > 0) {
                    fullPath.append(" ");
                }
                fullPath.append(::OpenAPI::toStringValue(t));
            }
        } else if (QString("csv").indexOf("tsv") == 0) {
            if (fullPath.indexOf("?") > 0)
                fullPath.append("&");
            else
                fullPath.append("?");
            fullPath.append("sort=");
            qint32 count = 0;
            foreach (QString t, sort) {
                if (count > 0) {
                    fullPath.append("\t");
                }
                fullPath.append(::OpenAPI::toStringValue(t));
            }
        }
    }

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILogApi::listLogsCallback);
    connect(this, &OAILogApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAILogApi::listLogsCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIArrayOfLogsResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit listLogsSignal(output);
        emit listLogsSignalFull(worker, output);
    } else {
        emit listLogsSignalE(output, error_type, error_str);
        emit listLogsSignalEFull(worker, error_type, error_str);
    }
}

void OAILogApi::listTagsByLogId(const qint64 &log_id) {
    QString fullPath = QString("%1://%2%3%4%5")
                           .arg(_scheme)
                           .arg(_host)
                           .arg(_port ? ":" + QString::number(_port) : "")
                           .arg(_basePath)
                           .arg("/logs/{logId}/tags");
    QString log_idPathParam("{");
    log_idPathParam.append("logId").append("}");
    fullPath.replace(log_idPathParam, QUrl::toPercentEncoding(::OpenAPI::toStringValue(log_id)));

    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");

    foreach (QString key, this->defaultHeaders.keys()) { input.headers.insert(key, this->defaultHeaders.value(key)); }

    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILogApi::listTagsByLogIdCallback);
    connect(this, &OAILogApi::abortRequestsSignal, worker, &QObject::deleteLater); 
    worker->execute(&input);
}

void OAILogApi::listTagsByLogIdCallback(OAIHttpRequestWorker *worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    } else {
        msg = "Error: " + worker->error_str;
        error_str = QString("%1, %2").arg(worker->error_str).arg(QString(worker->response));
    }
    OAIArrayOfTagsResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit listTagsByLogIdSignal(output);
        emit listTagsByLogIdSignalFull(worker, output);
    } else {
        emit listTagsByLogIdSignalE(output, error_type, error_str);
        emit listTagsByLogIdSignalEFull(worker, error_type, error_str);
    }
}

} // namespace OpenAPI
