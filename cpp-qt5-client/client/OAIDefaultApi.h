/**
 * ALICE Bookkeeping
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHttpRequest.h"

#include "OAIApiInformation.h"
#include "OAIDeployInformation.h"
#include "OAIErrors.h"
#include <QString>

#include <QObject>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const QString &scheme = "http", const QString &host = "localhost", int port = 0, const QString &basePath = "/api", const int timeOut = 0);
    ~OAIDefaultApi();

    void setScheme(const QString &scheme);
    void setHost(const QString &host);
    void setPort(int port);
    void setBasePath(const QString &basePath);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();

    void getDeployInformation();
    void getServerInformation();

private:
    QString _scheme, _host;
    int _port;
    QString _basePath;
    int _timeOut;
    QString _workingDirectory;
    QMap<QString, QString> defaultHeaders;
    bool isResponseCompressionEnabled;
    bool isRequestCompressionEnabled;

    void getDeployInformationCallback(OAIHttpRequestWorker *worker);
    void getServerInformationCallback(OAIHttpRequestWorker *worker);

signals:

    void getDeployInformationSignal(OAIDeployInformation summary);
    void getServerInformationSignal(OAIApiInformation summary);

    void getDeployInformationSignalFull(OAIHttpRequestWorker *worker, OAIDeployInformation summary);
    void getServerInformationSignalFull(OAIHttpRequestWorker *worker, OAIApiInformation summary);

    void getDeployInformationSignalE(OAIDeployInformation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServerInformationSignalE(OAIApiInformation summary, QNetworkReply::NetworkError error_type, QString error_str);

    void getDeployInformationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServerInformationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal(); 
};

} // namespace OpenAPI
#endif
