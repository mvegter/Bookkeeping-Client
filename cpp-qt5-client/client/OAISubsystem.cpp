/**
 * ALICE Bookkeeping
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubsystem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubsystem::OAISubsystem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubsystem::OAISubsystem() {
    this->initializeModel();
}

OAISubsystem::~OAISubsystem() {}

void OAISubsystem::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_update_at_isSet = false;
    m_update_at_isValid = false;
}

void OAISubsystem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubsystem::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_update_at_isValid = ::OpenAPI::fromJsonValue(update_at, json[QString("updateAt")]);
    m_update_at_isSet = !json[QString("updateAt")].isNull() && m_update_at_isValid;
}

QString OAISubsystem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubsystem::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(id));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(text));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(created_at));
    }
    if (m_update_at_isSet) {
        obj.insert(QString("updateAt"), ::OpenAPI::toJsonValue(update_at));
    }
    return obj;
}

qint64 OAISubsystem::getId() const {
    return id;
}
void OAISubsystem::setId(const qint64 &id) {
    this->id = id;
    this->m_id_isSet = true;
}

bool OAISubsystem::is_id_Set() const{
    return m_id_isSet;
}

bool OAISubsystem::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISubsystem::getText() const {
    return text;
}
void OAISubsystem::setText(const QString &text) {
    this->text = text;
    this->m_text_isSet = true;
}

bool OAISubsystem::is_text_Set() const{
    return m_text_isSet;
}

bool OAISubsystem::is_text_Valid() const{
    return m_text_isValid;
}

QString OAISubsystem::getCreatedAt() const {
    return created_at;
}
void OAISubsystem::setCreatedAt(const QString &created_at) {
    this->created_at = created_at;
    this->m_created_at_isSet = true;
}

bool OAISubsystem::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISubsystem::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAISubsystem::getUpdateAt() const {
    return update_at;
}
void OAISubsystem::setUpdateAt(const QString &update_at) {
    this->update_at = update_at;
    this->m_update_at_isSet = true;
}

bool OAISubsystem::is_update_at_Set() const{
    return m_update_at_isSet;
}

bool OAISubsystem::is_update_at_Valid() const{
    return m_update_at_isValid;
}

bool OAISubsystem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubsystem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_text_isValid && true;
}

} // namespace OpenAPI
