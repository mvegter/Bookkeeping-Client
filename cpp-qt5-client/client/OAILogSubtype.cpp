/**
 * ALICE Bookkeeping
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogSubtype.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogSubtype::OAILogSubtype(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogSubtype::OAILogSubtype() {
    this->initializeModel();
}

OAILogSubtype::~OAILogSubtype() {}

void OAILogSubtype::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILogSubtype::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILogSubtype::fromJson(QString jsonString) {
    
    if ( jsonString.compare("run", Qt::CaseInsensitive) == 0) {
        m_value = eOAILogSubtype::RUN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("subsystem", Qt::CaseInsensitive) == 0) {
        m_value = eOAILogSubtype::SUBSYSTEM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("announcement", Qt::CaseInsensitive) == 0) {
        m_value = eOAILogSubtype::ANNOUNCEMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("intervention", Qt::CaseInsensitive) == 0) {
        m_value = eOAILogSubtype::INTERVENTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("comment", Qt::CaseInsensitive) == 0) {
        m_value = eOAILogSubtype::COMMENT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILogSubtype::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILogSubtype::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILogSubtype::RUN:
            val = "run";
            break;
        case eOAILogSubtype::SUBSYSTEM:
            val = "subsystem";
            break;
        case eOAILogSubtype::ANNOUNCEMENT:
            val = "announcement";
            break;
        case eOAILogSubtype::INTERVENTION:
            val = "intervention";
            break;
        case eOAILogSubtype::COMMENT:
            val = "comment";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILogSubtype::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILogSubtype::eOAILogSubtype OAILogSubtype::getValue() const {
    return m_value;
}

void OAILogSubtype::setValue(const OAILogSubtype::eOAILogSubtype& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILogSubtype::isSet() const {
    
    return m_value_isSet;
}

bool OAILogSubtype::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
