openapi: 3.0.0
info:
  license:
    name: GNU General Public License v3.0
    url: http://alice-o2.web.cern.ch/license
  title: ALICE Bookkeeping
  version: 0.0.0
servers:
- url: /api
paths:
  /:
    get:
      operationId: getServerInformation
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiInformation'
          description: API information
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
          description: Service Unavailable
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
          description: Unexpected Error
      summary: Get server information
      x-accepts: application/json
  /logs:
    get:
      operationId: listLogs
      parameters:
      - description: Filter logs by their origin
        explode: true
        in: query
        name: filter[origin]
        required: false
        schema:
          $ref: '#/components/schemas/LogOrigin'
        style: form
      - description: The number of items to skip before starting to collect the result
          set.
        explode: true
        in: query
        name: page[offset]
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: The numbers of items to return.
        explode: true
        in: query
        name: page[limit]
        required: false
        schema:
          default: 100
          maximum: 100
          minimum: 1
          type: integer
        style: form
      - description: The sort order of the returned items.
        explode: false
        in: query
        name: sort
        required: false
        schema:
          default:
          - -id
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfLogsResponse'
          description: Expected response to a valid request.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad Request
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
          description: Unexpected Error
      summary: List all logs
      tags:
      - log
      x-accepts: application/json
    post:
      operationId: createLog
      requestBody:
        $ref: '#/components/requestBodies/CreateLog'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogResponse'
          description: Expected response to a valid request.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad Request
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
          description: Unexpected Error
      summary: Adds a new log
      tags:
      - log
      x-contentType: application/json
      x-accepts: application/json
  /logs/{logId}:
    get:
      operationId: getLogById
      parameters:
      - description: The id of the log to retrieve
        explode: false
        in: path
        name: logId
        required: true
        schema:
          $ref: '#/components/schemas/EntityId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogResponse'
          description: Expected response to a valid request.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
          description: Not Found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
          description: Unexpected Error
      summary: Gets a log by Id
      tags:
      - log
      x-accepts: application/json
  /logs/{logId}/tags:
    get:
      operationId: listTagsByLogId
      parameters:
      - description: The id of the log to retrieve
        explode: false
        in: path
        name: logId
        required: true
        schema:
          $ref: '#/components/schemas/EntityId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfTagsResponse'
          description: Expected response to a valid request.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
          description: Not Found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
          description: Unexpected Error
      summary: Lists all tags associated with a log
      tags:
      - log
      x-accepts: application/json
  /status:
    get:
      operationId: getDeployInformation
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeployInformation'
          description: Deploy information
        "503":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
          description: Service Unavailable
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
          description: Unexpected Error
      summary: Get deploy information
      x-accepts: application/json
  /tags:
    get:
      operationId: listTags
      parameters:
      - description: The number of items to skip before starting to collect the result
          set.
        explode: true
        in: query
        name: page[offset]
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
        style: form
      - description: The numbers of items to return.
        explode: true
        in: query
        name: page[limit]
        required: false
        schema:
          default: 100
          maximum: 100
          minimum: 1
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfTagsResponse'
          description: Expected response to a valid request.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad Request
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
          description: Unexpected Error
      summary: List all tags
      tags:
      - tag
      x-accepts: application/json
    post:
      operationId: createTag
      requestBody:
        $ref: '#/components/requestBodies/CreateTag'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResponse'
          description: Expected response to a valid request.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad Request
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
          description: Conflict
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
          description: Unexpected Error
      summary: Adds a new tag
      tags:
      - tag
      x-contentType: application/json
      x-accepts: application/json
  /tags/{tagId}:
    get:
      operationId: getTagById
      parameters:
      - description: The id of the tag to retrieve
        explode: false
        in: path
        name: tagId
        required: true
        schema:
          $ref: '#/components/schemas/EntityId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagResponse'
          description: Expected response to a valid request.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
          description: Not Found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
          description: Unexpected Error
      summary: Gets a tag by Id
      tags:
      - tag
      x-accepts: application/json
  /tags/{tagId}/logs:
    get:
      operationId: getLogsByTagId
      parameters:
      - description: The id of the tag to retrieve
        explode: false
        in: path
        name: tagId
        required: true
        schema:
          $ref: '#/components/schemas/EntityId'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfLogsResponse'
          description: Expected response to a valid request.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
          description: Bad Request
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
          description: Not Found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Errors'
          description: Unexpected Error
      summary: Gets all logs with this tag id
      tags:
      - tag
      x-accepts: application/json
components:
  parameters:
    FilterOrigin:
      description: Filter logs by their origin
      explode: true
      in: query
      name: filter[origin]
      required: false
      schema:
        $ref: '#/components/schemas/LogOrigin'
      style: form
    LogId:
      description: The id of the log to retrieve
      explode: false
      in: path
      name: logId
      required: true
      schema:
        $ref: '#/components/schemas/EntityId'
      style: simple
    PageLimit:
      description: The numbers of items to return.
      explode: true
      in: query
      name: page[limit]
      required: false
      schema:
        default: 100
        maximum: 100
        minimum: 1
        type: integer
      style: form
    PageOffset:
      description: The number of items to skip before starting to collect the result
        set.
      explode: true
      in: query
      name: page[offset]
      required: false
      schema:
        default: 0
        minimum: 0
        type: integer
      style: form
    SortLogs:
      description: The sort order of the returned items.
      explode: false
      in: query
      name: sort
      required: false
      schema:
        default:
        - -id
        items:
          type: string
        type: array
      style: form
    TagId:
      description: The id of the tag to retrieve
      explode: false
      in: path
      name: tagId
      required: true
      schema:
        $ref: '#/components/schemas/EntityId'
      style: simple
  requestBodies:
    CreateLog:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateLog'
      required: true
    CreateTag:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateTag'
      required: true
  responses:
    ArrayOfLogs:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ArrayOfLogsResponse'
      description: Expected response to a valid request.
    ArrayOfTags:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ArrayOfTagsResponse'
      description: Expected response to a valid request.
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
      description: Bad Request
    Conflict:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
      description: Conflict
    Log:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LogResponse'
      description: Expected response to a valid request.
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
      description: Not Found
    ServiceUnavailable:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
      description: Service Unavailable
    Tag:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TagResponse'
      description: Expected response to a valid request.
    UnexpectedError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'
      description: Unexpected Error
  schemas:
    ApiInformation:
      description: API information
      example:
        name: name
        version: version
      properties:
        name:
          description: Name of the API
          type: string
        version:
          description: Version of the API
          type: string
      required:
      - name
      - version
      type: object
    ArrayOfLogs:
      description: A list of Log objects.
      items:
        $ref: '#/components/schemas/Log'
      type: array
    ArrayOfLogsResponse:
      description: Response containing multiple logs.
      example:
        data:
        - title: title
          entryId: 0
          tags:
          - createdAt: createdAt
            updateAt: updateAt
            id: 6
            text: text
          - createdAt: createdAt
            updateAt: updateAt
            id: 6
            text: text
        - title: title
          entryId: 0
          tags:
          - createdAt: createdAt
            updateAt: updateAt
            id: 6
            text: text
          - createdAt: createdAt
            updateAt: updateAt
            id: 6
            text: text
      properties:
        data:
          description: A list of Log objects.
          items:
            $ref: '#/components/schemas/Log'
          type: array
      required:
      - data
      type: object
    ArrayOfTags:
      description: A list of Tag objects.
      items:
        $ref: '#/components/schemas/Tag'
      type: array
    ArrayOfTagsResponse:
      description: Response containing multiple tags.
      example:
        data:
        - createdAt: createdAt
          updateAt: updateAt
          id: 6
          text: text
        - createdAt: createdAt
          updateAt: updateAt
          id: 6
          text: text
      properties:
        data:
          description: A list of Tag objects.
          items:
            $ref: '#/components/schemas/Tag'
          type: array
      required:
      - data
      type: object
    CreateLog:
      additionalProperties: false
      description: Describes an intervention or an event that happened.
      example:
        title: title
      properties:
        title:
          description: Title of the log.
          type: string
      required:
      - title
      type: object
    CreateTag:
      additionalProperties: false
      description: A label attached to something for the purpose of identification.
      example:
        text: text
      properties:
        text:
          description: The label value of the tag.
          type: string
      required:
      - text
      type: object
    DeployInformation:
      description: Deploy information
      example:
        start: 6.027456183070403
        age: 0.8008281904610115
      properties:
        age:
          description: The number of seconds that the server is online.
          type: number
        start:
          description: The unix timestamp of the moment that the the server went online.
          type: number
      required:
      - age
      - start
      type: object
    EntityId:
      description: The unique identifier of this entity.
      format: int64
      type: integer
    Error:
      description: An Error object.
      properties:
        status:
          description: The HTTP status code applicable to this problem.
          type: string
        title:
          description: A short, human-readable summary of the problem.
          type: string
        detail:
          description: A human-readable explanation specific to this occurrence of
            the problem.
          type: string
      required:
      - status
      - title
      type: object
    Errors:
      description: A list of Error objects.
      properties:
        errors:
          description: A list of Error objects.
          items:
            $ref: '#/components/schemas/Error'
          minItems: 1
          type: array
      required:
      - errors
      type: object
    Log:
      description: Describes an intervention or an event that happened.
      example:
        title: title
        entryId: 0
        tags:
        - createdAt: createdAt
          updateAt: updateAt
          id: 6
          text: text
        - createdAt: createdAt
          updateAt: updateAt
          id: 6
          text: text
      properties:
        entryId:
          description: The unique identifier of this entity.
          format: int64
          type: integer
        title:
          description: Title of the log.
          type: string
        origin:
          $ref: '#/components/schemas/LogOrigin'
        tags:
          description: A list of Tag objects.
          items:
            $ref: '#/components/schemas/Tag'
          type: array
      required:
      - entryId
      - origin
      - tags
      - title
      type: object
    LogOrigin:
      description: Type of creator.
      enum:
      - human
      - process
      type: string
    LogResponse:
      description: Response containing a single log.
      example:
        data:
          title: title
          entryId: 0
          tags:
          - createdAt: createdAt
            updateAt: updateAt
            id: 6
            text: text
          - createdAt: createdAt
            updateAt: updateAt
            id: 6
            text: text
      properties:
        data:
          $ref: '#/components/schemas/Log'
      required:
      - data
      type: object
    Tag:
      additionalProperties: false
      description: A label attached to something for the purpose of identification.
      example:
        createdAt: createdAt
        updateAt: updateAt
        id: 6
        text: text
      properties:
        id:
          description: The unique identifier of this entity.
          format: int64
          type: integer
        text:
          description: The label value of the tag.
          type: string
        createdAt:
          description: Date when the tag was created.
          type: string
        updateAt:
          description: Date when the tag was last updated.
          type: string
      required:
      - id
      - text
      type: object
    TagResponse:
      description: Response containing a single tag.
      example:
        data:
          createdAt: createdAt
          updateAt: updateAt
          id: 6
          text: text
      properties:
        data:
          $ref: '#/components/schemas/Tag'
      required:
      - data
      type: object

