/**
 * ALICE Bookkeeping
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ArrayOfLogsResponse from '../model/ArrayOfLogsResponse';
import ArrayOfTagsResponse from '../model/ArrayOfTagsResponse';
import CreateLog from '../model/CreateLog';
import Errors from '../model/Errors';
import LogResponse from '../model/LogResponse';

/**
* Log service.
* @module api/LogApi
* @version 0.0.0
*/
export default class LogApi {

    /**
    * Constructs a new LogApi. 
    * @alias module:api/LogApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createLog operation.
     * @callback module:api/LogApi~createLogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a new log
     * @param {module:model/CreateLog} createLog 
     * @param {module:api/LogApi~createLogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogResponse}
     */
    createLog(createLog, callback) {
      let postBody = createLog;
      // verify the required parameter 'createLog' is set
      if (createLog === undefined || createLog === null) {
        throw new Error("Missing the required parameter 'createLog' when calling createLog");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LogResponse;
      return this.apiClient.callApi(
        '/logs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLogById operation.
     * @callback module:api/LogApi~getLogByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a log by Id
     * @param {Number} logId The id of the log to retrieve
     * @param {module:api/LogApi~getLogByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogResponse}
     */
    getLogById(logId, callback) {
      let postBody = null;
      // verify the required parameter 'logId' is set
      if (logId === undefined || logId === null) {
        throw new Error("Missing the required parameter 'logId' when calling getLogById");
      }

      let pathParams = {
        'logId': logId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LogResponse;
      return this.apiClient.callApi(
        '/logs/{logId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLogs operation.
     * @callback module:api/LogApi~listLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArrayOfLogsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all logs
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.filterOrigin Filter logs by their origin
     * @param {Number} opts.pageOffset The number of items to skip before starting to collect the result set. (default to 0)
     * @param {Number} opts.pageLimit The numbers of items to return. (default to 100)
     * @param {Array.<String>} opts.sort The sort order of the returned items.
     * @param {module:api/LogApi~listLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArrayOfLogsResponse}
     */
    listLogs(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter[origin]': opts['filterOrigin'],
        'page[offset]': opts['pageOffset'],
        'page[limit]': opts['pageLimit'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArrayOfLogsResponse;
      return this.apiClient.callApi(
        '/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsByLogId operation.
     * @callback module:api/LogApi~listTagsByLogIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ArrayOfTagsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all tags associated with a log
     * @param {Number} logId The id of the log to retrieve
     * @param {module:api/LogApi~listTagsByLogIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ArrayOfTagsResponse}
     */
    listTagsByLogId(logId, callback) {
      let postBody = null;
      // verify the required parameter 'logId' is set
      if (logId === undefined || logId === null) {
        throw new Error("Missing the required parameter 'logId' when calling listTagsByLogId");
      }

      let pathParams = {
        'logId': logId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ArrayOfTagsResponse;
      return this.apiClient.callApi(
        '/logs/{logId}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
