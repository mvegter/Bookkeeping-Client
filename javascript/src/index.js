/**
 * ALICE Bookkeeping
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import ApiInformation from './model/ApiInformation';
import ArrayOfLogsResponse from './model/ArrayOfLogsResponse';
import ArrayOfTagsResponse from './model/ArrayOfTagsResponse';
import DeployInformation from './model/DeployInformation';
import Error from './model/Error';
import Errors from './model/Errors';
import Log from './model/Log';
import LogResponse from './model/LogResponse';
import Tag from './model/Tag';
import DefaultApi from './api/DefaultApi';
import LogApi from './api/LogApi';
import TagApi from './api/TagApi';


/**
* JS API client generated by OpenAPI Generator.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var AliceBookkeeping = require('index'); // See note below*.
* var xxxSvc = new AliceBookkeeping.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new AliceBookkeeping.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new AliceBookkeeping.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new AliceBookkeeping.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 0.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The ApiInformation model constructor.
     * @property {module:model/ApiInformation}
     */
    ApiInformation,

    /**
     * The ArrayOfLogsResponse model constructor.
     * @property {module:model/ArrayOfLogsResponse}
     */
    ArrayOfLogsResponse,

    /**
     * The ArrayOfTagsResponse model constructor.
     * @property {module:model/ArrayOfTagsResponse}
     */
    ArrayOfTagsResponse,

    /**
     * The DeployInformation model constructor.
     * @property {module:model/DeployInformation}
     */
    DeployInformation,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The Errors model constructor.
     * @property {module:model/Errors}
     */
    Errors,

    /**
     * The Log model constructor.
     * @property {module:model/Log}
     */
    Log,

    /**
     * The LogResponse model constructor.
     * @property {module:model/LogResponse}
     */
    LogResponse,

    /**
     * The Tag model constructor.
     * @property {module:model/Tag}
     */
    Tag,

    /**
    * The DefaultApi service constructor.
    * @property {module:api/DefaultApi}
    */
    DefaultApi,

    /**
    * The LogApi service constructor.
    * @property {module:api/LogApi}
    */
    LogApi,

    /**
    * The TagApi service constructor.
    * @property {module:api/TagApi}
    */
    TagApi
};
