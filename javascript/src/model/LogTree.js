/**
 * ALICE Bookkeeping
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LogOrigin from './LogOrigin';
import LogSubtype from './LogSubtype';
import Tag from './Tag';

/**
 * The LogTree model module.
 * @module model/LogTree
 * @version 0.0.0
 */
class LogTree {
    /**
     * Constructs a new <code>LogTree</code>.
     * Describes an intervention or an event that happened.
     * @alias module:model/LogTree
     * @param id {Number} The unique identifier of this entity.
     * @param authorId {String} Name of the author.
     * @param title {String} Title of the log.
     * @param text {String} Body of the log.
     * @param creationTime {Number} Unix timestamp of the creation date time.
     * @param origin {module:model/LogOrigin} 
     * @param subtype {module:model/LogSubtype} 
     * @param tags {Array.<module:model/Tag>} A list of Tag objects.
     * @param rootLogId {Number} The unique identifier of this entity.
     * @param parentLogId {Number} The unique identifier of this entity.
     * @param children {Array.<module:model/LogTree>} A list of Log tree objects.
     */
    constructor(id, authorId, title, text, creationTime, origin, subtype, tags, rootLogId, parentLogId, children) { 
        
        LogTree.initialize(this, id, authorId, title, text, creationTime, origin, subtype, tags, rootLogId, parentLogId, children);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, authorId, title, text, creationTime, origin, subtype, tags, rootLogId, parentLogId, children) { 
        obj['id'] = id;
        obj['authorId'] = authorId;
        obj['title'] = title;
        obj['text'] = text;
        obj['creationTime'] = creationTime;
        obj['origin'] = origin;
        obj['subtype'] = subtype;
        obj['tags'] = tags;
        obj['rootLogId'] = rootLogId;
        obj['parentLogId'] = parentLogId;
        obj['children'] = children;
    }

    /**
     * Constructs a <code>LogTree</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogTree} obj Optional instance to populate.
     * @return {module:model/LogTree} The populated <code>LogTree</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LogTree();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('authorId')) {
                obj['authorId'] = ApiClient.convertToType(data['authorId'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Number');
            }
            if (data.hasOwnProperty('origin')) {
                obj['origin'] = LogOrigin.constructFromObject(data['origin']);
            }
            if (data.hasOwnProperty('subtype')) {
                obj['subtype'] = LogSubtype.constructFromObject(data['subtype']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [Tag]);
            }
            if (data.hasOwnProperty('rootLogId')) {
                obj['rootLogId'] = ApiClient.convertToType(data['rootLogId'], 'Number');
            }
            if (data.hasOwnProperty('parentLogId')) {
                obj['parentLogId'] = ApiClient.convertToType(data['parentLogId'], 'Number');
            }
            if (data.hasOwnProperty('children')) {
                obj['children'] = ApiClient.convertToType(data['children'], [LogTree]);
            }
        }
        return obj;
    }


}

/**
 * The unique identifier of this entity.
 * @member {Number} id
 */
LogTree.prototype['id'] = undefined;

/**
 * Name of the author.
 * @member {String} authorId
 */
LogTree.prototype['authorId'] = undefined;

/**
 * Title of the log.
 * @member {String} title
 */
LogTree.prototype['title'] = undefined;

/**
 * Body of the log.
 * @member {String} text
 */
LogTree.prototype['text'] = undefined;

/**
 * Unix timestamp of the creation date time.
 * @member {Number} creationTime
 */
LogTree.prototype['creationTime'] = undefined;

/**
 * @member {module:model/LogOrigin} origin
 */
LogTree.prototype['origin'] = undefined;

/**
 * @member {module:model/LogSubtype} subtype
 */
LogTree.prototype['subtype'] = undefined;

/**
 * A list of Tag objects.
 * @member {Array.<module:model/Tag>} tags
 */
LogTree.prototype['tags'] = undefined;

/**
 * The unique identifier of this entity.
 * @member {Number} rootLogId
 */
LogTree.prototype['rootLogId'] = undefined;

/**
 * The unique identifier of this entity.
 * @member {Number} parentLogId
 */
LogTree.prototype['parentLogId'] = undefined;

/**
 * A list of Log tree objects.
 * @member {Array.<module:model/LogTree>} children
 */
LogTree.prototype['children'] = undefined;






export default LogTree;

