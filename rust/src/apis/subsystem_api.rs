/*
 * ALICE Bookkeeping
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct SubsystemApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> SubsystemApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> SubsystemApiClient<C> {
        SubsystemApiClient {
            configuration,
        }
    }
}

pub trait SubsystemApi {
    fn create_subsystem(&self, create_subsystem: crate::models::CreateSubsystem) -> Box<dyn Future<Item = crate::models::SubsystemResponse, Error = Error<serde_json::Value>>>;
    fn delete_subsystem(&self, subsystem_id: i64) -> Box<dyn Future<Item = crate::models::SubsystemResponse, Error = Error<serde_json::Value>>>;
    fn get_subsystem(&self, subsystem_id: i64) -> Box<dyn Future<Item = crate::models::SubsystemResponse, Error = Error<serde_json::Value>>>;
    fn list_subsystems(&self, page: Option<crate::models::crate::models::PaginationOptions>) -> Box<dyn Future<Item = crate::models::ArrayOfSubsystemsResponse, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>SubsystemApi for SubsystemApiClient<C> {
    fn create_subsystem(&self, create_subsystem: crate::models::CreateSubsystem) -> Box<dyn Future<Item = crate::models::SubsystemResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/subsystems".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: false,
                in_query: true,
                param_name: "token".to_owned(),
            }))
        ;
        req = req.with_body_param(create_subsystem);

        req.execute(self.configuration.borrow())
    }

    fn delete_subsystem(&self, subsystem_id: i64) -> Box<dyn Future<Item = crate::models::SubsystemResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/subsystems/{subsystemId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: false,
                in_query: true,
                param_name: "token".to_owned(),
            }))
        ;
        req = req.with_path_param("subsystemId".to_string(), subsystem_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_subsystem(&self, subsystem_id: i64) -> Box<dyn Future<Item = crate::models::SubsystemResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/subsystems/{subsystemId}".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: false,
                in_query: true,
                param_name: "token".to_owned(),
            }))
        ;
        req = req.with_path_param("subsystemId".to_string(), subsystem_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn list_subsystems(&self, page: Option<crate::models::crate::models::PaginationOptions>) -> Box<dyn Future<Item = crate::models::ArrayOfSubsystemsResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/subsystems".to_string())
            .with_auth(__internal_request::Auth::ApiKey(__internal_request::ApiKey{
                in_header: false,
                in_query: true,
                param_name: "token".to_owned(),
            }))
        ;
        if let Some(ref s) = page {
            req = req.with_query_param("page".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

}
