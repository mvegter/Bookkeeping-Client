/*
 * ALICE Bookkeeping
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct TagApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> TagApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> TagApiClient<C> {
        TagApiClient {
            configuration,
        }
    }
}

pub trait TagApi {
    fn create_tag(&self, create_tag: crate::models::CreateTag) -> Box<dyn Future<Item = crate::models::TagResponse, Error = Error<serde_json::Value>>>;
    fn get_logs_by_tag_id(&self, tag_id: i64) -> Box<dyn Future<Item = crate::models::ArrayOfLogsResponse, Error = Error<serde_json::Value>>>;
    fn get_tag_by_id(&self, tag_id: i64) -> Box<dyn Future<Item = crate::models::TagResponse, Error = Error<serde_json::Value>>>;
    fn list_tags(&self, page_offset: Option<i32>, page_limit: Option<i32>) -> Box<dyn Future<Item = crate::models::ArrayOfTagsResponse, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>TagApi for TagApiClient<C> {
    fn create_tag(&self, create_tag: crate::models::CreateTag) -> Box<dyn Future<Item = crate::models::TagResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/tags".to_string())
        ;
        req = req.with_body_param(create_tag);

        req.execute(self.configuration.borrow())
    }

    fn get_logs_by_tag_id(&self, tag_id: i64) -> Box<dyn Future<Item = crate::models::ArrayOfLogsResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/tags/{tagId}/logs".to_string())
        ;
        req = req.with_path_param("tagId".to_string(), tag_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn get_tag_by_id(&self, tag_id: i64) -> Box<dyn Future<Item = crate::models::TagResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/tags/{tagId}".to_string())
        ;
        req = req.with_path_param("tagId".to_string(), tag_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn list_tags(&self, page_offset: Option<i32>, page_limit: Option<i32>) -> Box<dyn Future<Item = crate::models::ArrayOfTagsResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/tags".to_string())
        ;
        if let Some(ref s) = page_offset {
            req = req.with_query_param("page[offset]".to_string(), s.to_string());
        }
        if let Some(ref s) = page_limit {
            req = req.with_query_param("page[limit]".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

}
