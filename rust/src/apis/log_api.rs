/*
 * ALICE Bookkeeping
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct LogApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> LogApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> LogApiClient<C> {
        LogApiClient {
            configuration,
        }
    }
}

pub trait LogApi {
    fn create_log(&self, create_log: crate::models::CreateLog) -> Box<dyn Future<Item = crate::models::LogResponse, Error = Error<serde_json::Value>>>;
    fn get_log_by_id(&self, log_id: i64) -> Box<dyn Future<Item = crate::models::LogResponse, Error = Error<serde_json::Value>>>;
    fn list_logs(&self, page: Option<crate::models::crate::models::PaginationOptions>, filter: Option<crate::models::crate::models::FilterLogsOptions>, sort: Option<crate::models::crate::models::SortLogsOptions>) -> Box<dyn Future<Item = crate::models::ArrayOfLogsResponse, Error = Error<serde_json::Value>>>;
    fn list_tags_by_log_id(&self, log_id: i64) -> Box<dyn Future<Item = crate::models::ArrayOfTagsResponse, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>LogApi for LogApiClient<C> {
    fn create_log(&self, create_log: crate::models::CreateLog) -> Box<dyn Future<Item = crate::models::LogResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/logs".to_string())
        ;
        req = req.with_body_param(create_log);

        req.execute(self.configuration.borrow())
    }

    fn get_log_by_id(&self, log_id: i64) -> Box<dyn Future<Item = crate::models::LogResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/logs/{logId}".to_string())
        ;
        req = req.with_path_param("logId".to_string(), log_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn list_logs(&self, page: Option<crate::models::crate::models::PaginationOptions>, filter: Option<crate::models::crate::models::FilterLogsOptions>, sort: Option<crate::models::crate::models::SortLogsOptions>) -> Box<dyn Future<Item = crate::models::ArrayOfLogsResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/logs".to_string())
        ;
        if let Some(ref s) = page {
            req = req.with_query_param("page".to_string(), s.to_string());
        }
        if let Some(ref s) = filter {
            req = req.with_query_param("filter".to_string(), s.to_string());
        }
        if let Some(ref s) = sort {
            req = req.with_query_param("sort".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn list_tags_by_log_id(&self, log_id: i64) -> Box<dyn Future<Item = crate::models::ArrayOfTagsResponse, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/logs/{logId}/tags".to_string())
        ;
        req = req.with_path_param("logId".to_string(), log_id.to_string());

        req.execute(self.configuration.borrow())
    }

}
