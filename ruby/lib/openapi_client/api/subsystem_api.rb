=begin
#ALICE Bookkeeping

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class SubsystemApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Adds a new subsystem
    # @param create_subsystem [CreateSubsystem] 
    # @param [Hash] opts the optional parameters
    # @return [SubsystemResponse]
    def create_subsystem(create_subsystem, opts = {})
      data, _status_code, _headers = create_subsystem_with_http_info(create_subsystem, opts)
      data
    end

    # Adds a new subsystem
    # @param create_subsystem [CreateSubsystem] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubsystemResponse, Integer, Hash)>] SubsystemResponse data, response status code and response headers
    def create_subsystem_with_http_info(create_subsystem, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubsystemApi.create_subsystem ...'
      end
      # verify the required parameter 'create_subsystem' is set
      if @api_client.config.client_side_validation && create_subsystem.nil?
        fail ArgumentError, "Missing the required parameter 'create_subsystem' when calling SubsystemApi.create_subsystem"
      end
      # resource path
      local_var_path = '/subsystems'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(create_subsystem) 

      # return_type
      return_type = opts[:return_type] || 'SubsystemResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubsystemApi#create_subsystem\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a subsystem by Id
    # @param subsystem_id [Integer] The id of the subsystem to retrieve
    # @param [Hash] opts the optional parameters
    # @return [SubsystemResponse]
    def delete_subsystem(subsystem_id, opts = {})
      data, _status_code, _headers = delete_subsystem_with_http_info(subsystem_id, opts)
      data
    end

    # Deletes a subsystem by Id
    # @param subsystem_id [Integer] The id of the subsystem to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubsystemResponse, Integer, Hash)>] SubsystemResponse data, response status code and response headers
    def delete_subsystem_with_http_info(subsystem_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubsystemApi.delete_subsystem ...'
      end
      # verify the required parameter 'subsystem_id' is set
      if @api_client.config.client_side_validation && subsystem_id.nil?
        fail ArgumentError, "Missing the required parameter 'subsystem_id' when calling SubsystemApi.delete_subsystem"
      end
      if @api_client.config.client_side_validation && subsystem_id < 1
        fail ArgumentError, 'invalid value for "subsystem_id" when calling SubsystemApi.delete_subsystem, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/subsystems/{subsystemId}'.sub('{' + 'subsystemId' + '}', CGI.escape(subsystem_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'SubsystemResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubsystemApi#delete_subsystem\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a subsystem by Id
    # @param subsystem_id [Integer] The id of the subsystem to retrieve
    # @param [Hash] opts the optional parameters
    # @return [SubsystemResponse]
    def get_subsystem(subsystem_id, opts = {})
      data, _status_code, _headers = get_subsystem_with_http_info(subsystem_id, opts)
      data
    end

    # Get a subsystem by Id
    # @param subsystem_id [Integer] The id of the subsystem to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubsystemResponse, Integer, Hash)>] SubsystemResponse data, response status code and response headers
    def get_subsystem_with_http_info(subsystem_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubsystemApi.get_subsystem ...'
      end
      # verify the required parameter 'subsystem_id' is set
      if @api_client.config.client_side_validation && subsystem_id.nil?
        fail ArgumentError, "Missing the required parameter 'subsystem_id' when calling SubsystemApi.get_subsystem"
      end
      if @api_client.config.client_side_validation && subsystem_id < 1
        fail ArgumentError, 'invalid value for "subsystem_id" when calling SubsystemApi.get_subsystem, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/subsystems/{subsystemId}'.sub('{' + 'subsystemId' + '}', CGI.escape(subsystem_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'SubsystemResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubsystemApi#get_subsystem\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all subsystems
    # @param [Hash] opts the optional parameters
    # @option opts [PaginationOptions] :page Specifies the pagination requirements.
    # @return [ArrayOfSubsystemsResponse]
    def list_subsystems(opts = {})
      data, _status_code, _headers = list_subsystems_with_http_info(opts)
      data
    end

    # List all subsystems
    # @param [Hash] opts the optional parameters
    # @option opts [PaginationOptions] :page Specifies the pagination requirements.
    # @return [Array<(ArrayOfSubsystemsResponse, Integer, Hash)>] ArrayOfSubsystemsResponse data, response status code and response headers
    def list_subsystems_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SubsystemApi.list_subsystems ...'
      end
      # resource path
      local_var_path = '/subsystems'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'ArrayOfSubsystemsResponse' 

      # auth_names
      auth_names = opts[:auth_names] || ['ApiKeyAuth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SubsystemApi#list_subsystems\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
