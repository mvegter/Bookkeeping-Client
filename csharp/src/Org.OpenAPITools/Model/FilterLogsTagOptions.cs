/* 
 * ALICE Bookkeeping
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Specifies the tag related filter requirements for a request.
    /// </summary>
    [DataContract]
    public partial class FilterLogsTagOptions :  IEquatable<FilterLogsTagOptions>, IValidatableObject
    {
        /// <summary>
        /// The operation indicating the relation between the data.
        /// </summary>
        /// <value>The operation indicating the relation between the data.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OperationEnum
        {
            /// <summary>
            /// Enum And for value: and
            /// </summary>
            [EnumMember(Value = "and")]
            And = 1,

            /// <summary>
            /// Enum Or for value: or
            /// </summary>
            [EnumMember(Value = "or")]
            Or = 2

        }

        /// <summary>
        /// The operation indicating the relation between the data.
        /// </summary>
        /// <value>The operation indicating the relation between the data.</value>
        [DataMember(Name="operation", EmitDefaultValue=true)]
        public OperationEnum Operation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FilterLogsTagOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FilterLogsTagOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FilterLogsTagOptions" /> class.
        /// </summary>
        /// <param name="values">CSV style string of EntityIds. (required).</param>
        /// <param name="operation">The operation indicating the relation between the data. (required).</param>
        public FilterLogsTagOptions(string values = default(string), OperationEnum operation = default(OperationEnum))
        {
            // to ensure "values" is required (not null)
            if (values == null)
            {
                throw new InvalidDataException("values is a required property for FilterLogsTagOptions and cannot be null");
            }
            else
            {
                this.Values = values;
            }
            
            // to ensure "operation" is required (not null)
            if (operation == null)
            {
                throw new InvalidDataException("operation is a required property for FilterLogsTagOptions and cannot be null");
            }
            else
            {
                this.Operation = operation;
            }
            
        }
        
        /// <summary>
        /// CSV style string of EntityIds.
        /// </summary>
        /// <value>CSV style string of EntityIds.</value>
        [DataMember(Name="values", EmitDefaultValue=true)]
        public string Values { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FilterLogsTagOptions {\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  Operation: ").Append(Operation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FilterLogsTagOptions);
        }

        /// <summary>
        /// Returns true if FilterLogsTagOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of FilterLogsTagOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FilterLogsTagOptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Values == input.Values ||
                    (this.Values != null &&
                    this.Values.Equals(input.Values))
                ) && 
                (
                    this.Operation == input.Operation ||
                    (this.Operation != null &&
                    this.Operation.Equals(input.Operation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Values != null)
                    hashCode = hashCode * 59 + this.Values.GetHashCode();
                if (this.Operation != null)
                    hashCode = hashCode * 59 + this.Operation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            
            // Values (string) pattern
            Regex regexValues = new Regex(@"^([1-9]+\\d*,)*[1-9]+\\d*$", RegexOptions.CultureInvariant);
            if (false == regexValues.Match(this.Values).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Values, must match a pattern of " + regexValues, new [] { "Values" });
            }

            yield break;
        }
    }

}
