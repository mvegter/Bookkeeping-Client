/* 
 * ALICE Bookkeeping
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILogApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds a new log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLog"></param>
        /// <returns>LogResponse</returns>
        LogResponse CreateLog (CreateLog createLog);

        /// <summary>
        /// Adds a new log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLog"></param>
        /// <returns>ApiResponse of LogResponse</returns>
        ApiResponse<LogResponse> CreateLogWithHttpInfo (CreateLog createLog);
        /// <summary>
        /// Gets a log by Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">The id of the log to retrieve</param>
        /// <returns>LogResponse</returns>
        LogResponse GetLogById (long logId);

        /// <summary>
        /// Gets a log by Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">The id of the log to retrieve</param>
        /// <returns>ApiResponse of LogResponse</returns>
        ApiResponse<LogResponse> GetLogByIdWithHttpInfo (long logId);
        /// <summary>
        /// List all logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterOrigin">Filter logs by their origin (optional)</param>
        /// <param name="pageOffset">The number of items to skip before starting to collect the result set. (optional, default to 0)</param>
        /// <param name="pageLimit">The numbers of items to return. (optional, default to 100)</param>
        /// <param name="sort">The sort order of the returned items. (optional)</param>
        /// <returns>ArrayOfLogsResponse</returns>
        ArrayOfLogsResponse ListLogs (LogOrigin? filterOrigin = default(LogOrigin?), int? pageOffset = default(int?), int? pageLimit = default(int?), List<string> sort = default(List<string>));

        /// <summary>
        /// List all logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterOrigin">Filter logs by their origin (optional)</param>
        /// <param name="pageOffset">The number of items to skip before starting to collect the result set. (optional, default to 0)</param>
        /// <param name="pageLimit">The numbers of items to return. (optional, default to 100)</param>
        /// <param name="sort">The sort order of the returned items. (optional)</param>
        /// <returns>ApiResponse of ArrayOfLogsResponse</returns>
        ApiResponse<ArrayOfLogsResponse> ListLogsWithHttpInfo (LogOrigin? filterOrigin = default(LogOrigin?), int? pageOffset = default(int?), int? pageLimit = default(int?), List<string> sort = default(List<string>));
        /// <summary>
        /// Lists all tags associated with a log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">The id of the log to retrieve</param>
        /// <returns>ArrayOfTagsResponse</returns>
        ArrayOfTagsResponse ListTagsByLogId (long logId);

        /// <summary>
        /// Lists all tags associated with a log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">The id of the log to retrieve</param>
        /// <returns>ApiResponse of ArrayOfTagsResponse</returns>
        ApiResponse<ArrayOfTagsResponse> ListTagsByLogIdWithHttpInfo (long logId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adds a new log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLog"></param>
        /// <returns>Task of LogResponse</returns>
        System.Threading.Tasks.Task<LogResponse> CreateLogAsync (CreateLog createLog);

        /// <summary>
        /// Adds a new log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLog"></param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogResponse>> CreateLogAsyncWithHttpInfo (CreateLog createLog);
        /// <summary>
        /// Gets a log by Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">The id of the log to retrieve</param>
        /// <returns>Task of LogResponse</returns>
        System.Threading.Tasks.Task<LogResponse> GetLogByIdAsync (long logId);

        /// <summary>
        /// Gets a log by Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">The id of the log to retrieve</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LogResponse>> GetLogByIdAsyncWithHttpInfo (long logId);
        /// <summary>
        /// List all logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterOrigin">Filter logs by their origin (optional)</param>
        /// <param name="pageOffset">The number of items to skip before starting to collect the result set. (optional, default to 0)</param>
        /// <param name="pageLimit">The numbers of items to return. (optional, default to 100)</param>
        /// <param name="sort">The sort order of the returned items. (optional)</param>
        /// <returns>Task of ArrayOfLogsResponse</returns>
        System.Threading.Tasks.Task<ArrayOfLogsResponse> ListLogsAsync (LogOrigin? filterOrigin = default(LogOrigin?), int? pageOffset = default(int?), int? pageLimit = default(int?), List<string> sort = default(List<string>));

        /// <summary>
        /// List all logs
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterOrigin">Filter logs by their origin (optional)</param>
        /// <param name="pageOffset">The number of items to skip before starting to collect the result set. (optional, default to 0)</param>
        /// <param name="pageLimit">The numbers of items to return. (optional, default to 100)</param>
        /// <param name="sort">The sort order of the returned items. (optional)</param>
        /// <returns>Task of ApiResponse (ArrayOfLogsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArrayOfLogsResponse>> ListLogsAsyncWithHttpInfo (LogOrigin? filterOrigin = default(LogOrigin?), int? pageOffset = default(int?), int? pageLimit = default(int?), List<string> sort = default(List<string>));
        /// <summary>
        /// Lists all tags associated with a log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">The id of the log to retrieve</param>
        /// <returns>Task of ArrayOfTagsResponse</returns>
        System.Threading.Tasks.Task<ArrayOfTagsResponse> ListTagsByLogIdAsync (long logId);

        /// <summary>
        /// Lists all tags associated with a log
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">The id of the log to retrieve</param>
        /// <returns>Task of ApiResponse (ArrayOfTagsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArrayOfTagsResponse>> ListTagsByLogIdAsyncWithHttpInfo (long logId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LogApi : ILogApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LogApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LogApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogApi"/> class
        /// </summary>
        /// <returns></returns>
        public LogApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LogApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LogApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adds a new log 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLog"></param>
        /// <returns>LogResponse</returns>
        public LogResponse CreateLog (CreateLog createLog)
        {
             ApiResponse<LogResponse> localVarResponse = CreateLogWithHttpInfo(createLog);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a new log 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLog"></param>
        /// <returns>ApiResponse of LogResponse</returns>
        public ApiResponse<LogResponse> CreateLogWithHttpInfo (CreateLog createLog)
        {
            // verify the required parameter 'createLog' is set
            if (createLog == null)
                throw new ApiException(400, "Missing required parameter 'createLog' when calling LogApi->CreateLog");

            var localVarPath = "/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createLog != null && createLog.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createLog); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createLog; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// Adds a new log 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLog"></param>
        /// <returns>Task of LogResponse</returns>
        public async System.Threading.Tasks.Task<LogResponse> CreateLogAsync (CreateLog createLog)
        {
             ApiResponse<LogResponse> localVarResponse = await CreateLogAsyncWithHttpInfo(createLog);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a new log 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createLog"></param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogResponse>> CreateLogAsyncWithHttpInfo (CreateLog createLog)
        {
            // verify the required parameter 'createLog' is set
            if (createLog == null)
                throw new ApiException(400, "Missing required parameter 'createLog' when calling LogApi->CreateLog");

            var localVarPath = "/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createLog != null && createLog.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createLog); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createLog; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLog", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// Gets a log by Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">The id of the log to retrieve</param>
        /// <returns>LogResponse</returns>
        public LogResponse GetLogById (long logId)
        {
             ApiResponse<LogResponse> localVarResponse = GetLogByIdWithHttpInfo(logId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Gets a log by Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">The id of the log to retrieve</param>
        /// <returns>ApiResponse of LogResponse</returns>
        public ApiResponse<LogResponse> GetLogByIdWithHttpInfo (long logId)
        {
            // verify the required parameter 'logId' is set
            if (logId == null)
                throw new ApiException(400, "Missing required parameter 'logId' when calling LogApi->GetLogById");

            var localVarPath = "/logs/{logId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (logId != null) localVarPathParams.Add("logId", this.Configuration.ApiClient.ParameterToString(logId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLogById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// Gets a log by Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">The id of the log to retrieve</param>
        /// <returns>Task of LogResponse</returns>
        public async System.Threading.Tasks.Task<LogResponse> GetLogByIdAsync (long logId)
        {
             ApiResponse<LogResponse> localVarResponse = await GetLogByIdAsyncWithHttpInfo(logId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Gets a log by Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">The id of the log to retrieve</param>
        /// <returns>Task of ApiResponse (LogResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LogResponse>> GetLogByIdAsyncWithHttpInfo (long logId)
        {
            // verify the required parameter 'logId' is set
            if (logId == null)
                throw new ApiException(400, "Missing required parameter 'logId' when calling LogApi->GetLogById");

            var localVarPath = "/logs/{logId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (logId != null) localVarPathParams.Add("logId", this.Configuration.ApiClient.ParameterToString(logId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLogById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LogResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (LogResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(LogResponse)));
        }

        /// <summary>
        /// List all logs 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterOrigin">Filter logs by their origin (optional)</param>
        /// <param name="pageOffset">The number of items to skip before starting to collect the result set. (optional, default to 0)</param>
        /// <param name="pageLimit">The numbers of items to return. (optional, default to 100)</param>
        /// <param name="sort">The sort order of the returned items. (optional)</param>
        /// <returns>ArrayOfLogsResponse</returns>
        public ArrayOfLogsResponse ListLogs (LogOrigin? filterOrigin = default(LogOrigin?), int? pageOffset = default(int?), int? pageLimit = default(int?), List<string> sort = default(List<string>))
        {
             ApiResponse<ArrayOfLogsResponse> localVarResponse = ListLogsWithHttpInfo(filterOrigin, pageOffset, pageLimit, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all logs 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterOrigin">Filter logs by their origin (optional)</param>
        /// <param name="pageOffset">The number of items to skip before starting to collect the result set. (optional, default to 0)</param>
        /// <param name="pageLimit">The numbers of items to return. (optional, default to 100)</param>
        /// <param name="sort">The sort order of the returned items. (optional)</param>
        /// <returns>ApiResponse of ArrayOfLogsResponse</returns>
        public ApiResponse<ArrayOfLogsResponse> ListLogsWithHttpInfo (LogOrigin? filterOrigin = default(LogOrigin?), int? pageOffset = default(int?), int? pageLimit = default(int?), List<string> sort = default(List<string>))
        {

            var localVarPath = "/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filterOrigin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter[origin]", filterOrigin)); // query parameter
            if (pageOffset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page[offset]", pageOffset)); // query parameter
            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page[limit]", pageLimit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "sort", sort)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArrayOfLogsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArrayOfLogsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArrayOfLogsResponse)));
        }

        /// <summary>
        /// List all logs 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterOrigin">Filter logs by their origin (optional)</param>
        /// <param name="pageOffset">The number of items to skip before starting to collect the result set. (optional, default to 0)</param>
        /// <param name="pageLimit">The numbers of items to return. (optional, default to 100)</param>
        /// <param name="sort">The sort order of the returned items. (optional)</param>
        /// <returns>Task of ArrayOfLogsResponse</returns>
        public async System.Threading.Tasks.Task<ArrayOfLogsResponse> ListLogsAsync (LogOrigin? filterOrigin = default(LogOrigin?), int? pageOffset = default(int?), int? pageLimit = default(int?), List<string> sort = default(List<string>))
        {
             ApiResponse<ArrayOfLogsResponse> localVarResponse = await ListLogsAsyncWithHttpInfo(filterOrigin, pageOffset, pageLimit, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all logs 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filterOrigin">Filter logs by their origin (optional)</param>
        /// <param name="pageOffset">The number of items to skip before starting to collect the result set. (optional, default to 0)</param>
        /// <param name="pageLimit">The numbers of items to return. (optional, default to 100)</param>
        /// <param name="sort">The sort order of the returned items. (optional)</param>
        /// <returns>Task of ApiResponse (ArrayOfLogsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArrayOfLogsResponse>> ListLogsAsyncWithHttpInfo (LogOrigin? filterOrigin = default(LogOrigin?), int? pageOffset = default(int?), int? pageLimit = default(int?), List<string> sort = default(List<string>))
        {

            var localVarPath = "/logs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filterOrigin != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter[origin]", filterOrigin)); // query parameter
            if (pageOffset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page[offset]", pageOffset)); // query parameter
            if (pageLimit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page[limit]", pageLimit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "sort", sort)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListLogs", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArrayOfLogsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArrayOfLogsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArrayOfLogsResponse)));
        }

        /// <summary>
        /// Lists all tags associated with a log 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">The id of the log to retrieve</param>
        /// <returns>ArrayOfTagsResponse</returns>
        public ArrayOfTagsResponse ListTagsByLogId (long logId)
        {
             ApiResponse<ArrayOfTagsResponse> localVarResponse = ListTagsByLogIdWithHttpInfo(logId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists all tags associated with a log 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">The id of the log to retrieve</param>
        /// <returns>ApiResponse of ArrayOfTagsResponse</returns>
        public ApiResponse<ArrayOfTagsResponse> ListTagsByLogIdWithHttpInfo (long logId)
        {
            // verify the required parameter 'logId' is set
            if (logId == null)
                throw new ApiException(400, "Missing required parameter 'logId' when calling LogApi->ListTagsByLogId");

            var localVarPath = "/logs/{logId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (logId != null) localVarPathParams.Add("logId", this.Configuration.ApiClient.ParameterToString(logId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTagsByLogId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArrayOfTagsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArrayOfTagsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArrayOfTagsResponse)));
        }

        /// <summary>
        /// Lists all tags associated with a log 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">The id of the log to retrieve</param>
        /// <returns>Task of ArrayOfTagsResponse</returns>
        public async System.Threading.Tasks.Task<ArrayOfTagsResponse> ListTagsByLogIdAsync (long logId)
        {
             ApiResponse<ArrayOfTagsResponse> localVarResponse = await ListTagsByLogIdAsyncWithHttpInfo(logId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists all tags associated with a log 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="logId">The id of the log to retrieve</param>
        /// <returns>Task of ApiResponse (ArrayOfTagsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArrayOfTagsResponse>> ListTagsByLogIdAsyncWithHttpInfo (long logId)
        {
            // verify the required parameter 'logId' is set
            if (logId == null)
                throw new ApiException(400, "Missing required parameter 'logId' when calling LogApi->ListTagsByLogId");

            var localVarPath = "/logs/{logId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (logId != null) localVarPathParams.Add("logId", this.Configuration.ApiClient.ParameterToString(logId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListTagsByLogId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArrayOfTagsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArrayOfTagsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArrayOfTagsResponse)));
        }

    }
}
