/* 
 * ALICE Bookkeeping
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubsystemApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds a new subsystem
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubsystem"></param>
        /// <returns>SubsystemResponse</returns>
        SubsystemResponse CreateSubsystem (CreateSubsystem createSubsystem);

        /// <summary>
        /// Adds a new subsystem
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubsystem"></param>
        /// <returns>ApiResponse of SubsystemResponse</returns>
        ApiResponse<SubsystemResponse> CreateSubsystemWithHttpInfo (CreateSubsystem createSubsystem);
        /// <summary>
        /// Deletes a subsystem by Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subsystemId">The id of the subsystem to retrieve</param>
        /// <returns>SubsystemResponse</returns>
        SubsystemResponse DeleteSubsystem (long subsystemId);

        /// <summary>
        /// Deletes a subsystem by Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subsystemId">The id of the subsystem to retrieve</param>
        /// <returns>ApiResponse of SubsystemResponse</returns>
        ApiResponse<SubsystemResponse> DeleteSubsystemWithHttpInfo (long subsystemId);
        /// <summary>
        /// Get a subsystem by Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subsystemId">The id of the subsystem to retrieve</param>
        /// <returns>SubsystemResponse</returns>
        SubsystemResponse GetSubsystem (long subsystemId);

        /// <summary>
        /// Get a subsystem by Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subsystemId">The id of the subsystem to retrieve</param>
        /// <returns>ApiResponse of SubsystemResponse</returns>
        ApiResponse<SubsystemResponse> GetSubsystemWithHttpInfo (long subsystemId);
        /// <summary>
        /// List all subsystems
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specifies the pagination requirements. (optional)</param>
        /// <returns>ArrayOfSubsystemsResponse</returns>
        ArrayOfSubsystemsResponse ListSubsystems (PaginationOptions page = default(PaginationOptions));

        /// <summary>
        /// List all subsystems
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specifies the pagination requirements. (optional)</param>
        /// <returns>ApiResponse of ArrayOfSubsystemsResponse</returns>
        ApiResponse<ArrayOfSubsystemsResponse> ListSubsystemsWithHttpInfo (PaginationOptions page = default(PaginationOptions));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adds a new subsystem
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubsystem"></param>
        /// <returns>Task of SubsystemResponse</returns>
        System.Threading.Tasks.Task<SubsystemResponse> CreateSubsystemAsync (CreateSubsystem createSubsystem);

        /// <summary>
        /// Adds a new subsystem
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubsystem"></param>
        /// <returns>Task of ApiResponse (SubsystemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubsystemResponse>> CreateSubsystemAsyncWithHttpInfo (CreateSubsystem createSubsystem);
        /// <summary>
        /// Deletes a subsystem by Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subsystemId">The id of the subsystem to retrieve</param>
        /// <returns>Task of SubsystemResponse</returns>
        System.Threading.Tasks.Task<SubsystemResponse> DeleteSubsystemAsync (long subsystemId);

        /// <summary>
        /// Deletes a subsystem by Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subsystemId">The id of the subsystem to retrieve</param>
        /// <returns>Task of ApiResponse (SubsystemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubsystemResponse>> DeleteSubsystemAsyncWithHttpInfo (long subsystemId);
        /// <summary>
        /// Get a subsystem by Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subsystemId">The id of the subsystem to retrieve</param>
        /// <returns>Task of SubsystemResponse</returns>
        System.Threading.Tasks.Task<SubsystemResponse> GetSubsystemAsync (long subsystemId);

        /// <summary>
        /// Get a subsystem by Id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subsystemId">The id of the subsystem to retrieve</param>
        /// <returns>Task of ApiResponse (SubsystemResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubsystemResponse>> GetSubsystemAsyncWithHttpInfo (long subsystemId);
        /// <summary>
        /// List all subsystems
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specifies the pagination requirements. (optional)</param>
        /// <returns>Task of ArrayOfSubsystemsResponse</returns>
        System.Threading.Tasks.Task<ArrayOfSubsystemsResponse> ListSubsystemsAsync (PaginationOptions page = default(PaginationOptions));

        /// <summary>
        /// List all subsystems
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specifies the pagination requirements. (optional)</param>
        /// <returns>Task of ApiResponse (ArrayOfSubsystemsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ArrayOfSubsystemsResponse>> ListSubsystemsAsyncWithHttpInfo (PaginationOptions page = default(PaginationOptions));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubsystemApi : ISubsystemApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubsystemApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubsystemApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubsystemApi"/> class
        /// </summary>
        /// <returns></returns>
        public SubsystemApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubsystemApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SubsystemApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adds a new subsystem 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubsystem"></param>
        /// <returns>SubsystemResponse</returns>
        public SubsystemResponse CreateSubsystem (CreateSubsystem createSubsystem)
        {
             ApiResponse<SubsystemResponse> localVarResponse = CreateSubsystemWithHttpInfo(createSubsystem);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds a new subsystem 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubsystem"></param>
        /// <returns>ApiResponse of SubsystemResponse</returns>
        public ApiResponse<SubsystemResponse> CreateSubsystemWithHttpInfo (CreateSubsystem createSubsystem)
        {
            // verify the required parameter 'createSubsystem' is set
            if (createSubsystem == null)
                throw new ApiException(400, "Missing required parameter 'createSubsystem' when calling SubsystemApi->CreateSubsystem");

            var localVarPath = "/subsystems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createSubsystem != null && createSubsystem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createSubsystem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createSubsystem; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSubsystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubsystemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubsystemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubsystemResponse)));
        }

        /// <summary>
        /// Adds a new subsystem 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubsystem"></param>
        /// <returns>Task of SubsystemResponse</returns>
        public async System.Threading.Tasks.Task<SubsystemResponse> CreateSubsystemAsync (CreateSubsystem createSubsystem)
        {
             ApiResponse<SubsystemResponse> localVarResponse = await CreateSubsystemAsyncWithHttpInfo(createSubsystem);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds a new subsystem 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSubsystem"></param>
        /// <returns>Task of ApiResponse (SubsystemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubsystemResponse>> CreateSubsystemAsyncWithHttpInfo (CreateSubsystem createSubsystem)
        {
            // verify the required parameter 'createSubsystem' is set
            if (createSubsystem == null)
                throw new ApiException(400, "Missing required parameter 'createSubsystem' when calling SubsystemApi->CreateSubsystem");

            var localVarPath = "/subsystems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (createSubsystem != null && createSubsystem.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createSubsystem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createSubsystem; // byte array
            }

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateSubsystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubsystemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubsystemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubsystemResponse)));
        }

        /// <summary>
        /// Deletes a subsystem by Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subsystemId">The id of the subsystem to retrieve</param>
        /// <returns>SubsystemResponse</returns>
        public SubsystemResponse DeleteSubsystem (long subsystemId)
        {
             ApiResponse<SubsystemResponse> localVarResponse = DeleteSubsystemWithHttpInfo(subsystemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a subsystem by Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subsystemId">The id of the subsystem to retrieve</param>
        /// <returns>ApiResponse of SubsystemResponse</returns>
        public ApiResponse<SubsystemResponse> DeleteSubsystemWithHttpInfo (long subsystemId)
        {
            // verify the required parameter 'subsystemId' is set
            if (subsystemId == null)
                throw new ApiException(400, "Missing required parameter 'subsystemId' when calling SubsystemApi->DeleteSubsystem");

            var localVarPath = "/subsystems/{subsystemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subsystemId != null) localVarPathParams.Add("subsystemId", this.Configuration.ApiClient.ParameterToString(subsystemId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSubsystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubsystemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubsystemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubsystemResponse)));
        }

        /// <summary>
        /// Deletes a subsystem by Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subsystemId">The id of the subsystem to retrieve</param>
        /// <returns>Task of SubsystemResponse</returns>
        public async System.Threading.Tasks.Task<SubsystemResponse> DeleteSubsystemAsync (long subsystemId)
        {
             ApiResponse<SubsystemResponse> localVarResponse = await DeleteSubsystemAsyncWithHttpInfo(subsystemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a subsystem by Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subsystemId">The id of the subsystem to retrieve</param>
        /// <returns>Task of ApiResponse (SubsystemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubsystemResponse>> DeleteSubsystemAsyncWithHttpInfo (long subsystemId)
        {
            // verify the required parameter 'subsystemId' is set
            if (subsystemId == null)
                throw new ApiException(400, "Missing required parameter 'subsystemId' when calling SubsystemApi->DeleteSubsystem");

            var localVarPath = "/subsystems/{subsystemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subsystemId != null) localVarPathParams.Add("subsystemId", this.Configuration.ApiClient.ParameterToString(subsystemId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteSubsystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubsystemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubsystemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubsystemResponse)));
        }

        /// <summary>
        /// Get a subsystem by Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subsystemId">The id of the subsystem to retrieve</param>
        /// <returns>SubsystemResponse</returns>
        public SubsystemResponse GetSubsystem (long subsystemId)
        {
             ApiResponse<SubsystemResponse> localVarResponse = GetSubsystemWithHttpInfo(subsystemId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a subsystem by Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subsystemId">The id of the subsystem to retrieve</param>
        /// <returns>ApiResponse of SubsystemResponse</returns>
        public ApiResponse<SubsystemResponse> GetSubsystemWithHttpInfo (long subsystemId)
        {
            // verify the required parameter 'subsystemId' is set
            if (subsystemId == null)
                throw new ApiException(400, "Missing required parameter 'subsystemId' when calling SubsystemApi->GetSubsystem");

            var localVarPath = "/subsystems/{subsystemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subsystemId != null) localVarPathParams.Add("subsystemId", this.Configuration.ApiClient.ParameterToString(subsystemId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubsystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubsystemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubsystemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubsystemResponse)));
        }

        /// <summary>
        /// Get a subsystem by Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subsystemId">The id of the subsystem to retrieve</param>
        /// <returns>Task of SubsystemResponse</returns>
        public async System.Threading.Tasks.Task<SubsystemResponse> GetSubsystemAsync (long subsystemId)
        {
             ApiResponse<SubsystemResponse> localVarResponse = await GetSubsystemAsyncWithHttpInfo(subsystemId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a subsystem by Id 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="subsystemId">The id of the subsystem to retrieve</param>
        /// <returns>Task of ApiResponse (SubsystemResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubsystemResponse>> GetSubsystemAsyncWithHttpInfo (long subsystemId)
        {
            // verify the required parameter 'subsystemId' is set
            if (subsystemId == null)
                throw new ApiException(400, "Missing required parameter 'subsystemId' when calling SubsystemApi->GetSubsystem");

            var localVarPath = "/subsystems/{subsystemId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (subsystemId != null) localVarPathParams.Add("subsystemId", this.Configuration.ApiClient.ParameterToString(subsystemId)); // path parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubsystem", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubsystemResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubsystemResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubsystemResponse)));
        }

        /// <summary>
        /// List all subsystems 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specifies the pagination requirements. (optional)</param>
        /// <returns>ArrayOfSubsystemsResponse</returns>
        public ArrayOfSubsystemsResponse ListSubsystems (PaginationOptions page = default(PaginationOptions))
        {
             ApiResponse<ArrayOfSubsystemsResponse> localVarResponse = ListSubsystemsWithHttpInfo(page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all subsystems 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specifies the pagination requirements. (optional)</param>
        /// <returns>ApiResponse of ArrayOfSubsystemsResponse</returns>
        public ApiResponse<ArrayOfSubsystemsResponse> ListSubsystemsWithHttpInfo (PaginationOptions page = default(PaginationOptions))
        {

            var localVarPath = "/subsystems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSubsystems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArrayOfSubsystemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArrayOfSubsystemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArrayOfSubsystemsResponse)));
        }

        /// <summary>
        /// List all subsystems 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specifies the pagination requirements. (optional)</param>
        /// <returns>Task of ArrayOfSubsystemsResponse</returns>
        public async System.Threading.Tasks.Task<ArrayOfSubsystemsResponse> ListSubsystemsAsync (PaginationOptions page = default(PaginationOptions))
        {
             ApiResponse<ArrayOfSubsystemsResponse> localVarResponse = await ListSubsystemsAsyncWithHttpInfo(page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all subsystems 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Specifies the pagination requirements. (optional)</param>
        /// <returns>Task of ApiResponse (ArrayOfSubsystemsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ArrayOfSubsystemsResponse>> ListSubsystemsAsyncWithHttpInfo (PaginationOptions page = default(PaginationOptions))
        {

            var localVarPath = "/subsystems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter

            // authentication (ApiKeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("token")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", this.Configuration.GetApiKeyWithPrefix("token")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListSubsystems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ArrayOfSubsystemsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ArrayOfSubsystemsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ArrayOfSubsystemsResponse)));
        }

    }
}
