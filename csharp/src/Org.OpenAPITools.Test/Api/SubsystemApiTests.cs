/* 
 * ALICE Bookkeeping
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing SubsystemApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SubsystemApiTests
    {
        private SubsystemApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new SubsystemApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of SubsystemApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' SubsystemApi
            //Assert.IsInstanceOf(typeof(SubsystemApi), instance);
        }

        
        /// <summary>
        /// Test CreateSubsystem
        /// </summary>
        [Test]
        public void CreateSubsystemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateSubsystem createSubsystem = null;
            //var response = instance.CreateSubsystem(createSubsystem);
            //Assert.IsInstanceOf(typeof(SubsystemResponse), response, "response is SubsystemResponse");
        }
        
        /// <summary>
        /// Test DeleteSubsystem
        /// </summary>
        [Test]
        public void DeleteSubsystemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long subsystemId = null;
            //var response = instance.DeleteSubsystem(subsystemId);
            //Assert.IsInstanceOf(typeof(SubsystemResponse), response, "response is SubsystemResponse");
        }
        
        /// <summary>
        /// Test GetSubsystem
        /// </summary>
        [Test]
        public void GetSubsystemTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long subsystemId = null;
            //var response = instance.GetSubsystem(subsystemId);
            //Assert.IsInstanceOf(typeof(SubsystemResponse), response, "response is SubsystemResponse");
        }
        
        /// <summary>
        /// Test ListSubsystems
        /// </summary>
        [Test]
        public void ListSubsystemsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PaginationOptions page = null;
            //var response = instance.ListSubsystems(page);
            //Assert.IsInstanceOf(typeof(ArrayOfSubsystemsResponse), response, "response is ArrayOfSubsystemsResponse");
        }
        
    }

}
